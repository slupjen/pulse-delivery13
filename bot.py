import sys
import os
import asyncio
import logging
import time
import random
import signal
import aiohttp
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.methods import GetChatMember
from aiogram.exceptions import TelegramBadRequest
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')
    os.system("chcp 65001 > nul")

# ==================== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ====================
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 8154128217))
CHANNEL_ID = os.getenv('CHANNEL_ID', "@pulsedelivery")
GEOCODING_API_KEY = os.getenv('GEOCODING_API_KEY')
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫—É –¥–ª—è Render.com
WEB_SERVER_HOST = os.getenv('WEB_SERVER_HOST', '0.0.0.0')
WEB_SERVER_PORT = int(os.getenv('PORT', 8000))
WEBHOOK_PATH = os.getenv('WEBHOOK_PATH', '/webhook')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
BASE_WEBHOOK_URL = os.getenv('WEBHOOK_URL')

BLACKLIST = []
RATE_LIMIT = 10
RATE_PERIOD = 60
MAX_MESSAGES_PER_MIN = 40

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –±–æ—Ç–∞
BOT_RUNNING = True

# ==================== –õ–û–ì–£–í–ê–ù–ù–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_errors.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ====================
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = RedisStorage.from_url(REDIS_URL)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Redis –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
dp = Dispatcher(storage=storage)

# ==================== –°–¢–ê–ù–ò –§–û–†–ú–ò ====================
class OrderForm(StatesGroup):
    captcha = State()
    name = State()
    phone = State()
    item = State()
    delivery_type = State()
    pickup_address = State()
    delivery_address_method = State()
    delivery_address = State()
    delivery_location = State()
    delivery_time = State()
    custom_time = State()
    payment = State()
    change_from = State()
    promo_code = State()
    review = State()

# ==================== –°–ò–°–¢–ï–ú–ê –ó–ê–•–ò–°–¢–£ ====================
class ProtectionMiddleware(BaseMiddleware):
    def __init__(self):
        self.user_activity = {}
        self.message_timestamps = {}

    async def __call__(self, handler, event: types.Message, data):
        global BOT_RUNNING

        if not BOT_RUNNING:
            return

        user_id = event.from_user.id
        now = time.time()

        if user_id == ADMIN_ID:
            return await handler(event, data)

        if user_id in BLACKLIST:
            await event.answer("‚õî –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞.")
            return

        # –õ—ñ–º—ñ—Ç RATE_LIMIT –∑–∞ RATE_PERIOD —Å–µ–∫—É–Ω–¥
        if user_id in self.user_activity:
            self.user_activity[user_id] = [
                t for t in self.user_activity[user_id]
                if now - t < RATE_PERIOD
            ]
            if len(self.user_activity[user_id]) >= RATE_LIMIT:
                await event.answer(f"‚ùó –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {RATE_PERIOD} —Å–µ–∫.")
                return
        self.user_activity.setdefault(user_id, []).append(now)

        # –õ—ñ–º—ñ—Ç MAX_MESSAGES_PER_MIN –∑–∞ 60 —Å–µ–∫—É–Ω–¥
        if user_id not in self.message_timestamps:
            self.message_timestamps[user_id] = []
        self.message_timestamps[user_id].append(now)
        self.message_timestamps[user_id] = [
            t for t in self.message_timestamps[user_id]
            if now - t < 60
        ]
        if len(self.message_timestamps[user_id]) > MAX_MESSAGES_PER_MIN:
            BLACKLIST.append(user_id)
            logger.warning(f"User {user_id} added to blacklist")
            await event.answer("‚õî –í–∞—à –∞–∫–∞—É–Ω—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.")
            return

        return await handler(event, data)

# ==================== –ö–õ–ê–í–Ü–ê–¢–£–†–ò ====================
def style_text(text, emoji=None):
    if emoji:
        text = f"{emoji} {text}"
    return text

def new_order_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=style_text("–û—Ñ–æ—Ä–º–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üõçÔ∏è")))
    return builder.as_markup(resize_keyboard=True)

def phone_request_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=style_text("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "üì±"), request_contact=True))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def item_input_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=style_text("–¶–µ –≤—Å–µ", "‚úÖ")))
    builder.add(KeyboardButton(text=style_text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "‚ùå")))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def delivery_type_kb():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=style_text("–ú–æ—î –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è", "üì¶"), callback_data="sender"))
    builder.add(InlineKeyboardButton(text=style_text("–î–æ—Å—Ç–∞–≤–∫–∞", "üöö"), callback_data="delivery"))
    builder.adjust(1)
    return builder.as_markup()

def delivery_address_method_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=style_text("–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É", "‚úçÔ∏è")))
    builder.add(KeyboardButton(text=style_text("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é", "üìç"), request_location=True))
    builder.add(KeyboardButton(text=style_text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "‚ùå")))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def delivery_time_kb():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=style_text("–Ø–∫–Ω–∞–π—à–≤–∏–¥—à–µ", "‚ö°"), callback_data="asap"))
    builder.add(InlineKeyboardButton(text=style_text("–í–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π —á–∞—Å", "‚è±Ô∏è"), callback_data="custom_time"))
    builder.adjust(1)
    return builder.as_markup()

def payment_kb():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=style_text("–ì–æ—Ç—ñ–≤–∫–∞", "üíµ"), callback_data="payment_cash"))
    builder.add(InlineKeyboardButton(text=style_text("–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É", "üí≥"), callback_data="payment_cashless"))
    builder.adjust(1)
    return builder.as_markup()

def review_kb():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=style_text("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "‚úèÔ∏è"), callback_data="edit_order"))
    builder.add(InlineKeyboardButton(text=style_text("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", "üéüÔ∏è"), callback_data="enter_promo"))
    builder.add(InlineKeyboardButton(text=style_text("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üì®"), callback_data="send_order"))
    builder.adjust(1)
    return builder.as_markup()

def get_items_edit_kb(items: list, can_finish: bool = True):
    builder = InlineKeyboardBuilder()
    for i, item in enumerate(items, 1):
        item_text = f"{i}: {item[:15]}..." if len(item) > 15 else f"{i}: {item}"
        builder.add(InlineKeyboardButton(text=f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {item_text}", callback_data=f"remove_item_{i-1}"))
    
    if can_finish:
        builder.add(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="finish_editing"))
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —â–µ —Ç–æ–≤–∞—Ä", callback_data="add_more_items"))
    builder.adjust(1)
    return builder.as_markup()

def admin_main_kb():
    global BOT_RUNNING
    builder = InlineKeyboardBuilder()
    
    if BOT_RUNNING:
        builder.add(InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", callback_data="admin_pause_bot"))
    else:
        builder.add(InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", callback_data="admin_start_bot"))
    
    builder.add(InlineKeyboardButton(text="üìã –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫", callback_data="admin_blacklist"))
    builder.add(InlineKeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å", callback_data="admin_status"))
    builder.add(InlineKeyboardButton(text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", callback_data="admin_stop_bot"))
    builder.adjust(1, 2, 1)
    return builder.as_markup()

def admin_blacklist_kb(users: list):
    builder = InlineKeyboardBuilder()
    for user_id in users:
        builder.add(InlineKeyboardButton(
            text=f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {user_id}",
            callback_data=f"unblock_{user_id}"
        ))
    builder.row(
        InlineKeyboardButton(text="üë§ –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_add_to_blacklist"),
        InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_blacklist_refresh")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    builder.adjust(2)
    return builder.as_markup()

def admin_accept_kb(order_id: str):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        callback_data=f"accept_order_{order_id}"
    ))
    return builder.as_markup()

# ==================== –ö–õ–Æ–ß–û–í–Ü –§–£–ù–ö–¶–Ü–á ====================
def escape_html(text):
    return (text
        .replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
    )

async def generate_captcha():
    a = random.randint(1, 5)
    b = random.randint(1, 5)
    return f"{a} + {b}", a + b

async def check_subscription(user_id: int):
    try:
        member = await bot(GetChatMember(chat_id=CHANNEL_ID, user_id=user_id))
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def get_address_from_coords(lat: float, lon: float):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Nominatim API"""
    if not GEOCODING_API_KEY:
        logger.warning("GEOCODING_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return None
        
    try:
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={lat}&lon={lon}&zoom=18&addressdetails=1"
        headers = {"User-Agent": "Telegram Delivery Bot"}
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                data = await response.json()
                
                if 'address' in data:
                    address = data['address']
                    components = []
                    
                    if 'road' in address:
                        components.append(address['road'])
                    if 'house_number' in address:
                        components.append(address['house_number'])
                    if 'suburb' in address:
                        components.append(address['suburb'])
                    if 'city' in address:
                        components.append(address['city'])
                    
                    return ", ".join(components) if components else None
                
                return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏: {e}")
        return None

# ==================== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò ====================
@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message, state: FSMContext):
    global BOT_RUNNING
    if not BOT_RUNNING:
        await message.answer("‚è∏Ô∏è –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
        
    try:
        if not await check_subscription(message.from_user.id):
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", 
                url=f"https://t.me/{CHANNEL_ID[1:]}" if CHANNEL_ID.startswith("@") else f"https://t.me/{CHANNEL_ID}"
            ))
            builder.add(InlineKeyboardButton(
                text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", 
                callback_data="check_subscription"
            ))
            builder.adjust(1)
            
            await message.answer(
                "üì¢ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:",
                reply_markup=builder.as_markup()
            )
            return
        
        # –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ —î, –≥–µ–Ω–µ—Ä—É—î–º–æ –∫–∞–ø—á—É
        captcha_text, answer = await generate_captcha()
        await state.update_data(captcha_answer=answer)
        await message.answer(f"üîí –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {captcha_text} = ?")
        await state.set_state(OrderForm.captcha)
    except Exception as e:
        logger.error(f"Error in send_welcome: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery, state: FSMContext):
    global BOT_RUNNING
    if not BOT_RUNNING:
        await callback.message.answer("‚è∏Ô∏è –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
        
    try:
        if await check_subscription(callback.from_user.id):
            await callback.message.delete()
            captcha_text, answer = await generate_captcha()
            await state.update_data(captcha_answer=answer)
            await callback.message.answer(f"üîí –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {captcha_text} = ?")
            await state.set_state(OrderForm.captcha)
        else:
            await callback.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
    except Exception as e:
        logger.error(f"Error in check_subscription_callback: {e}")
        await callback.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)

@dp.message(OrderForm.captcha)
async def check_captcha(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if "captcha_answer" in data:
        if message.text.isdigit() and int(message.text) == data["captcha_answer"]:
            await message.answer("‚úÖ –í—ñ—Ç–∞—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            await state.clear()
            welcome_text = "–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?"
            await message.answer(welcome_text, reply_markup=new_order_kb())
            await state.set_state(OrderForm.name)
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ /start –∑–Ω–æ–≤—É.")
        await state.clear()

@dp.message(F.text.contains("–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
async def new_order(message: types.Message, state: FSMContext):
    global BOT_RUNNING
    if not BOT_RUNNING:
        await message.answer("‚è∏Ô∏è –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
        
    await state.clear()
    await message.answer("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏? (–ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, 2-30 —Å–∏–º–≤–æ–ª—ñ–≤)", 
                        reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderForm.name)

@dp.message(OrderForm.name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name.replace(" ", "").isalpha() or len(name) < 2 or len(name) > 30:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è (–ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, 2-30 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    
    await state.update_data(name=escape_html(name))
    request_text = "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX"
    await message.answer(request_text, reply_markup=phone_request_kb())
    await state.set_state(OrderForm.phone)

@dp.message(OrderForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = None
    
    if message.contact:
        phone = message.contact.phone_number
    elif message.text:
        phone = message.text.strip()
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä–∞
        if not phone.replace("+", "").isdigit() or len(phone) < 10:
            await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380123456789)")
            return
    else:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        return
    
    await state.update_data(phone=escape_html(phone))
    await state.update_data(item_text="", item_photos=[])
    request_text = "–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏? –ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å, —Ñ–æ—Ç–æ –∞–±–æ –≤—Å–µ —Ä–∞–∑–æ–º.\n–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–¶–µ –≤—Å–µ\" –≤–Ω–∏–∑—É."
    await message.answer(request_text, reply_markup=item_input_kb())
    await state.set_state(OrderForm.item)

@dp.message(OrderForm.item, F.content_type.in_({"text", "photo"}))
async def collect_item_data(message: types.Message, state: FSMContext):
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if message.text and ("–¶–µ –≤—Å–µ" in message.text or "–°–∫–∞—Å—É–≤–∞—Ç–∏" in message.text):
        data = await state.get_data()
        item_text = data.get("item_text", "").strip()
        
        if not item_text and not data.get("item_photos"):
            await message.answer("‚ùó –í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.", 
                                reply_markup=item_input_kb())
            return
        
        if "–°–∫–∞—Å—É–≤–∞—Ç–∏" in message.text:
            await state.clear()
            await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
            return
        
        request_text = "–í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –í–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?"
        await message.answer(request_text, reply_markup=delivery_type_kb())
        await state.set_state(OrderForm.delivery_type)
        return
    
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    data = await state.get_data()

    if message.text:
        text = data.get("item_text", "") + escape_html(message.text) + "\n"
        await state.update_data(item_text=text)
    elif message.photo:
        photo = message.photo[-1].file_id
        photos = data.get("item_photos", [])
        if len(photos) < 25:
            photos.append(photo)
            await state.update_data(item_photos=photos)
        else:
            await message.answer("‚ùó –ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 25 —Ñ–æ—Ç–æ.", reply_markup=item_input_kb())
    
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–¶–µ –≤—Å–µ\".", 
                        reply_markup=item_input_kb())

@dp.callback_query(F.data.in_({"sender", "delivery"}))
async def get_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    delivery_type = "–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫" if callback.data == "sender" else "–û–¥–µ—Ä–∂—É–≤–∞—á"
    await state.update_data(delivery_type=delivery_type)

    if callback.data == "sender":
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
        await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:",
                                    reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(OrderForm.pickup_address)
    else:
        await state.update_data(pickup_address="‚Äî")
        request_text = "–Ø–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏?"
        await callback.message.answer(request_text, reply_markup=delivery_address_method_kb())
        await state.set_state(OrderForm.delivery_address_method)
    await callback.answer()

@dp.message(OrderForm.pickup_address)
async def get_pickup(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await state.clear()
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
        return
        
    if len(message.text) < 5:
        await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É")
        return
        
    await state.update_data(pickup_address=escape_html(message.text))
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                        reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(OrderForm.delivery_address)

@dp.message(OrderForm.delivery_address_method)
async def handle_delivery_address_method(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await state.clear()
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
        return
        
    if message.location:
        location = message.location
        lat = location.latitude
        lon = location.longitude
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        address_text = await get_address_from_coords(lat, lon)
        if not address_text:
            address_text = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat:.6f}, {lon:.6f}"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–±–æ—Ö –∫–∞—Ä—Ç
        maps_links = f"Google Maps: https://maps.google.com/?q={lat},{lon}\nApple Maps: https://maps.apple.com/?q={lat},{lon}"
        await state.update_data(delivery_location=maps_links)
        await state.update_data(delivery_address=address_text)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º
        
        await message.answer(
            f"–î—è–∫—É—î–º–æ! –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞.\n–ê–¥—Ä–µ—Å–∞: {address_text}",
            reply_markup=ReplyKeyboardRemove()
        )
        
        request_text = "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        await message.answer(request_text, reply_markup=delivery_time_kb())
        await state.set_state(OrderForm.delivery_time)
    elif message.text and "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É" in message.text:
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                            reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(OrderForm.delivery_address)
    else:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–∫–∞–∑–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏", 
                            reply_markup=delivery_address_method_kb())

@dp.message(OrderForm.delivery_address)
async def get_delivery_address(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await state.clear()
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
        return
        
    if len(message.text) < 5:
        await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É")
        return
        
    await state.update_data(delivery_address=escape_html(message.text))
    await state.update_data(delivery_location="‚Äî")
    
    request_text = "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    await message.answer(request_text, reply_markup=delivery_time_kb())
    await state.set_state(OrderForm.delivery_time)

@dp.callback_query(F.data == "asap")
async def set_asap_time(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(delivery_time="–Ø–∫–Ω–∞–π—à–≤–∏–¥—à–µ ‚ö°")
    request_text = "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç–∏:"
    await callback.message.answer(request_text, reply_markup=payment_kb())
    await state.set_state(OrderForm.payment)
    await callback.answer()

@dp.callback_query(F.data == "custom_time")
async def request_custom_time(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15:00):",
                                reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(OrderForm.custom_time)
    await callback.answer()

@dp.message(OrderForm.custom_time)
async def get_custom_time(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await state.clear()
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
        return
        
    if len(message.text) < 2:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15:00)")
        return
        
    await state.update_data(delivery_time=f"‚è∞ {escape_html(message.text)}")
    request_text = "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç–∏:"
    await message.answer(request_text, reply_markup=payment_kb())
    await state.set_state(OrderForm.payment)

@dp.callback_query(F.data.in_({"payment_cash", "payment_cashless"}))
async def get_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    payment = "–ì–æ—Ç—ñ–≤–∫–∞ üíµ" if callback.data == "payment_cash" else "–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É üí≥"
    await state.update_data(payment=payment)

    if payment == "–ì–æ—Ç—ñ–≤–∫–∞ üíµ":
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
        await callback.message.answer("–ó —è–∫–æ—ó —Å—É–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ—à—Ç–∞? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 500 –≥—Ä–Ω)",
                                    reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(OrderForm.change_from)
    else:
        await show_order_review(callback.message, state)
        await state.set_state(OrderForm.review)
    await callback.answer()

@dp.message(OrderForm.change_from)
async def get_change_from(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await state.clear()
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
        return
        
    if not message.text.replace(" ", "").replace("–≥—Ä–Ω", "").isdigit():
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 500)")
        return
        
    await state.update_data(change_from=f"üí≤ {escape_html(message.text)}")
    await show_order_review(message, state)
    await state.set_state(OrderForm.review)

async def show_order_review(message: types.Message, state: FSMContext):
    data = await state.get_data()

    item_text = data.get("item_text", "").strip()
    items = [line.strip() for line in item_text.split('\n') if line.strip()]
    item_photos = data.get("item_photos", [])
    delivery_type = data.get("delivery_type", "‚Äî")
    pickup_address = data.get("pickup_address", "‚Äî")
    delivery_address = data.get("delivery_address", "‚Äî")
    delivery_location = data.get("delivery_location", "‚Äî")
    delivery_time = data.get("delivery_time", "‚Äî")
    payment = data.get("payment", "‚Äî")
    change_from = data.get("change_from", "‚Äî")

    if items:
        items_text = "\n".join(f"‚Ä¢ {item}" for item in items)
    else:
        items_text = "‚Äî"
    
    review_text = (
        f"üìã <b>–ü–ï–†–ï–í–Ü–†–¢–ï –í–ê–®–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø:</b>\n\n"
        f"üë§ –Ü–º'—è: {data.get('name', '‚Äî')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
        f"üì¶ –©–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏:\n{items_text}\n"
        f"üöõ –¢–∏–ø: {delivery_type}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {pickup_address}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    )
    
    if delivery_location != "‚Äî":
        if "\n" in delivery_location:  # –Ø–∫—â–æ —î –æ–±–∏–¥–≤–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            google_link, apple_link = delivery_location.split("\n")
            review_text += f"üó∫Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞: <a href='{google_link.split(': ')[1]}'>Google Maps</a> | <a href='{apple_link.split(': ')[1]}'>Apple Maps</a>\n"
        elif delivery_location.startswith("http"):  # –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            review_text += f"üó∫Ô∏è <a href='{delivery_location}'>–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –º–∞–ø—ñ</a>\n"
    
    review_text += (
        f"‚è∞ –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {payment}\n"
    )
    
    if payment == "–ì–æ—Ç—ñ–≤–∫–∞ üíµ":
        review_text += f"üí≤ –†–µ—à—Ç–∞ –∑: {change_from}\n"

    await message.answer(review_text, reply_markup=review_kb(), disable_web_page_preview=True)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Ñ–æ—Ç–æ –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    for photo_id in item_photos:
        await message.answer_photo(photo=photo_id)

@dp.callback_query(F.data == "edit_order")
async def edit_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    
    item_text = data.get("item_text", "").strip()
    items = [line.strip() for line in item_text.split('\n') if line.strip()]
    item_photos = data.get("item_photos", [])
    
    if not items and not item_photos:
        await callback.message.answer(
            "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏:",
            reply_markup=item_input_kb()
        )
        await state.set_state(OrderForm.item)
    else:
        message_text = "üìã –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n\n" + "\n".join(
            f"{i+1}. {item}" for i, item in enumerate(items))
        
        if item_photos:
            message_text += f"\n\nüì∑ –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(item_photos)}"
        
        await callback.message.answer(
            message_text,
            reply_markup=get_items_edit_kb(items)
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_item_"))
async def remove_item(callback: types.CallbackQuery, state: FSMContext):
    item_index = int(callback.data.split("_")[-1])
    data = await state.get_data()
    
    item_text = data.get("item_text", "").strip()
    items = [line.strip() for line in item_text.split('\n') if line.strip()]
    item_photos = data.get("item_photos", [])
    
    if 0 <= item_index < len(items):
        items.pop(item_index)
        new_item_text = "\n".join(items)
        await state.update_data(item_text=new_item_text)
        
        if items:
            message_text = "üìã –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n\n" + "\n".join(
                f"{i+1}. {item}" for i, item in enumerate(items))
            
            if item_photos:
                message_text += f"\n\nüì∑ –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(item_photos)}"
            
            await callback.message.edit_text(
                message_text,
                reply_markup=get_items_edit_kb(items)
            )
        else:
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏:",
                reply_markup=None
            )
            await callback.message.answer(
                "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏:",
                reply_markup=item_input_kb()
            )
            await state.set_state(OrderForm.item)
    else:
        await callback.answer("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä—É", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "add_more_items")
async def add_more_items(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏:",
        reply_markup=item_input_kb()
    )
    await state.set_state(OrderForm.item)
    await callback.answer()

@dp.callback_query(F.data == "finish_editing")
async def finish_editing(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await show_order_review(callback.message, state)
    await state.set_state(OrderForm.review)
    await callback.answer()

@dp.callback_query(F.data == "enter_promo")
async def enter_promo_code(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    await callback.message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderForm.promo_code)
    await callback.answer()

@dp.message(OrderForm.promo_code)
async def process_promo_code(message: types.Message, state: FSMContext):
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await state.clear()
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=new_order_kb())
        return
        
    promo_code = message.text.strip()
    await state.update_data(promo_code=promo_code)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    client_id = message.from_user.id
    await state.update_data(user_id=client_id)
    
    await send_order_to_admin(message, state)
    await message.answer(
        f"‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º \"{promo_code}\" –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
        reply_markup=new_order_kb()
    )
    await state.clear()

@dp.callback_query(F.data == "send_order")
async def send_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    
    client_id = callback.from_user.id
    await state.update_data(user_id=client_id)
    
    await send_order_to_admin(callback.message, state)
    await callback.message.answer(
        "–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
        reply_markup=new_order_kb()
    )
    await state.clear()
    await callback.answer()

async def send_order_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    order_id = str(int(time.time()))[-6:]
    user_id = data.get('user_id')
    
    if not user_id:
        logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ user_id —É —Å—Ç–∞–Ω—ñ")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
        return

    item_text = data.get('item_text', '').strip()
    items = [line.strip() for line in item_text.split('\n') if line.strip()]
    item_photos = data.get('item_photos', [])
    
    if items:
        items_text = "\n".join(f"‚Ä¢ {item}" for item in items)
    else:
        items_text = "‚Äî"

    delivery_type = data.get('delivery_type', '‚Äî')
    pickup_address = data.get('pickup_address', '‚Äî')
    delivery_address = data.get('delivery_address', '‚Äî')  # –¢–µ–∫—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞
    delivery_location = data.get('delivery_location', '‚Äî')
    delivery_time = data.get('delivery_time', '‚Äî')
    payment = data.get('payment', '‚Äî')
    change_from = data.get('change_from', '‚Äî')
    promo_code = data.get('promo_code', None)

    order_message = (
        f"üÜï <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}:</b>\n\n"
        f"üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name', '‚Äî')} (ID: {user_id})\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
    )
    
    if promo_code:
        order_message += f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n"
    
    order_message += (
        f"üì¶ –©–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏:\n{items_text}\n"
        f"üöõ –¢–∏–ø: {delivery_type}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {pickup_address}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"  # –¢–µ–∫—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞
    )
    
    if delivery_location != "‚Äî":
        if "\n" in delivery_location:  # –Ø–∫—â–æ —î –æ–±–∏–¥–≤–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            google_link, apple_link = delivery_location.split("\n")
            order_message += f"üó∫Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞: <a href='{google_link.split(': ')[1]}'>Google Maps</a> | <a href='{apple_link.split(': ')[1]}'>Apple Maps</a>\n"
        elif delivery_location.startswith("http"):  # –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            order_message += f"üó∫Ô∏è <a href='{delivery_location}'>–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –º–∞–ø—ñ</a>\n"
    
    order_message += (
        f"‚è∞ –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {payment}\n"
    )
    
    if payment == "–ì–æ—Ç—ñ–≤–∫–∞ üíµ":
        order_message += f"üí≤ –†–µ—à—Ç–∞ –∑: {change_from}\n"

    try:
        msg = await bot.send_message(
            chat_id=ADMIN_ID, 
            text=order_message, 
            reply_markup=admin_accept_kb(order_id),
            disable_web_page_preview=True
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Ñ–æ—Ç–æ –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        for photo_id in item_photos:
            await bot.send_photo(chat_id=ADMIN_ID, photo=photo_id)
            
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

@dp.callback_query(F.data.startswith("accept_order_"))
async def accept_order(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[-1]
    
    await callback.message.edit_text(
        text=callback.message.text + "\n\n‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–ï</b>",
        reply_markup=None
    )
    
    client_id = None
    for line in callback.message.text.split('\n'):
        if "ID:" in line:
            try:
                client_id = int(line.split('ID:')[1].strip().split(')')[0])
                break
            except (ValueError, IndexError):
                logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É ID –∫–ª—ñ—î–Ω—Ç–∞")
    
    if client_id:
        try:
            await bot.send_message(
                chat_id=client_id,
                text=f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É!\n\n"
                     f"–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=new_order_kb()
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
    
    await callback.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ")

# ==================== –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨ ====================
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏")
        return
    await message.answer("üë®‚Äçüíª <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_main_kb())

@dp.callback_query(F.data == "admin_status"))
async def admin_status(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    
    storage = dp.storage
    active_sessions = 0
    
    if isinstance(storage, MemoryStorage):
        data_dict = getattr(storage, '_data', {})
        active_sessions = len(data_dict)
    
    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        f"üü¢ –°—Ç–∞–Ω: {'–ê–∫—Ç–∏–≤–Ω–∏–π ‚ñ∂Ô∏è' if BOT_RUNNING else '–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ ‚è∏Ô∏è'}\n"
        f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É: {len(BLACKLIST)}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {active_sessions}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_status")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    try:
        await callback.message.edit_text(
            text=status_text,
            reply_markup=keyboard
        )
    except TelegramBadRequest:
        await callback.answer("–°—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è")
    await callback.answer()

@dp.callback_query(F.data == "admin_blacklist"))
async def admin_show_blacklist(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    
    try:
        if not BLACKLIST:
            text = "üìã <b>–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—Ä—É—á–Ω—É"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_add_to_blacklist")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_blacklist_refresh")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            await callback.message.edit_text(text=text, reply_markup=keyboard)
        else:
            text = "üìã <b>–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:</b>\n\n" + "\n".join(f"‚Ä¢ {user_id}" for user_id in BLACKLIST)
            new_keyboard = admin_blacklist_kb(BLACKLIST)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –≤–º—ñ—Å—Ç –∞–±–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            current_text = callback.message.text or ""
            current_markup = callback.message.reply_markup
            
            if text != current_text or new_keyboard != current_markup:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=new_keyboard
                )
            else:
                await callback.answer("–°–ø–∏—Å–æ–∫ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–°–ø–∏—Å–æ–∫ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è")
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É: {e}")
            await callback.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "admin_blacklist_refresh"))
async def admin_refresh_blacklist(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    await admin_show_blacklist(callback)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ")

@dp.callback_query(F.data == "admin_add_to_blacklist"))
async def admin_add_blacklist(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    
    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("unblock_"))
async def unblock_user(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    user_id_str = callback.data.split("_")[1]
    if not user_id_str.isdigit():
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        return

    user_id = int(user_id_str)
    
    if user_id in BLACKLIST:
        BLACKLIST.remove(user_id)
        await callback.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
    else:
        await callback.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ–º–∞—î —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É")
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º
    if not BLACKLIST:
        text = "üìã <b>–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—Ä—É—á–Ω—É"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_add_to_blacklist")],
            [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_blacklist_refresh")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        await callback.message.edit_text(text=text, reply_markup=keyboard)
    else:
        text = "üìã <b>–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:</b>\n\n" + "\n".join(f"‚Ä¢ {user_id}" for user_id in BLACKLIST)
        await callback.message.edit_text(
            text=text,
            reply_markup=admin_blacklist_kb(BLACKLIST)
        )

@dp.callback_query(F.data == "admin_pause_bot"))
async def admin_pause(callback: types.CallbackQuery):
    global BOT_RUNNING
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    BOT_RUNNING = False
    await callback.message.edit_text("‚è∏Ô∏è –ë–æ—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ", reply_markup=admin_main_kb())
    await callback.answer("‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ")

@dp.callback_query(F.data == "admin_start_bot"))
async def admin_start(callback: types.CallbackQuery):
    global BOT_RUNNING
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    BOT_RUNNING = True
    await callback.message.edit_text("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ", reply_markup=admin_main_kb())
    await callback.answer("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–æ")

@dp.callback_query(F.data == "admin_stop_bot"))
async def admin_stop(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    await callback.message.edit_text("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await callback.answer("‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ")
    await on_shutdown(bot)
    await bot.session.close()
    os._exit(0)

@dp.callback_query(F.data == "admin_back"))
async def admin_back(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    await callback.message.edit_text("üë®‚Äçüíª <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_main_kb())
    await callback.answer()

# ==================== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ====================
async def on_startup(bot: Bot):
    logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π")
    await bot.send_message(chat_id=ADMIN_ID, text="üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")

async def on_shutdown(bot: Bot):
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await bot.send_message(chat_id=ADMIN_ID, text="üî¥ –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è")
    await bot.session.close()

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def on_startup(bot: Bot):
    logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –Ω–∞ Render.com
    if BASE_WEBHOOK_URL:
        webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
        await bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {webhook_url}")
    
    await bot.send_message(chat_id=ADMIN_ID, text="üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")

async def on_shutdown(bot: Bot):
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    
    if BASE_WEBHOOK_URL:
        await bot.delete_webhook()
    
    await bot.send_message(chat_id=ADMIN_ID, text="üî¥ –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è")
    await bot.session.close()

async def handle_shutdown(signal, loop):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...")
    await on_shutdown(bot)
    loop.stop()

async def main():
    # –î–æ–¥–∞—î–º–æ middleware
    dp.message.middleware(ProtectionMiddleware())
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤
    if BASE_WEBHOOK_URL:
        app = web.Application()
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
            secret_token=WEBHOOK_SECRET,
        )
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–∫—É —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig, lambda: asyncio.create_task(handle_shutdown(sig, loop))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
        await site.start()
        
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
        logger.info(f"–í–µ–±—Ö—É–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {BASE_WEBHOOK_URL}{WEBHOOK_PATH}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ —É –≤—ñ—á–Ω–æ–º—É —Ü–∏–∫–ª—ñ
        await asyncio.Event().wait()
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º –∑ polling (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")